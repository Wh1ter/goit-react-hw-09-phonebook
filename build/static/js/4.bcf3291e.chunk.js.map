{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","redux/app/contacts-selectors.js","views/ContactsView.js"],"names":["module","exports","ContactForm","onSubmitData","useState","name","number","contact","setContact","handleContactChange","event","inputName","currentTarget","inputValue","value","prev","reset","className","style","contactform","type","onSubmit","preventDefault","contactForAdd","TextField","label","pattern","title","required","onChange","Button","marginTop","variant","color","ContactList","del","contacts","map","id","marginLeft","height","margin","data-id","onClick","Id","defaultProps","Filter","setFilterToState","toUpperCase","getFilter","state","app","filters","getContacts","getIsLoading","loading","getVisibleFilterArray","createSelector","filter","newArr","includes","connect","isLoadingContacts","selectors","visibleArray","dispatch","fetchContacts","appOperations","formSubmitHandler","contactData","addContact","contactDelete","contactId","deleteContact","filterSet","str","appActions","useEffect"],"mappings":"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","file":"static/js/4.bcf3291e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactform\":\"ContactForm_contactform__GYSiQ\"};","import style from \"./ContactForm.module.css\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction ContactForm({ onSubmitData }) {\n  /* const [nameState, setNameState] = useState(\"\");\n  const [numberState, setNumberState] = useState(\"\");\n  const handleNameChange = (event) => {\n    setNameState(event.currentTarget.value);\n  };\n  const handleNumberChange = (event) => {\n    setNumberState(event.currentTarget.value);\n  }; */\n\n  const [contact, setContact] = useState({\n    name: \"\",\n    number: \"\",\n  });\n\n  const handleContactChange = (event) => {\n    let inputName = event.currentTarget.name;\n    let inputValue = event.currentTarget.value;\n    setContact((prev) => ({\n      ...prev,\n      [inputName]: inputValue,\n    }));\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    let contactForAdd = { name: contact.name, number: contact.number };\n\n    onSubmitData(contactForAdd);\n\n    reset();\n  };\n  const reset = () => {\n    setContact({ name: \"\", number: \"\" });\n  };\n\n  return (\n    <div className={style.contactform}>\n      <form type=\"submit\" onSubmit={handleSubmit}>\n        <TextField\n          label=\"Name:\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleContactChange}\n          value={contact.name}\n        />\n        <TextField\n          label=\"Number:\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          onChange={handleContactChange}\n          value={contact.number}\n        />\n        <br />\n        <Button\n          style={{ marginTop: 25 }}\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add contact\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmitData: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction ContactList({ del, contacts }) {\n  const deleteId = (Id) => {\n    del(Id);\n  };\n  const createList = () => {\n    return contacts.map((contact) => {\n      return (\n        <li key={contact.id} id={contact.id}>\n          <Button\n            style={{ marginLeft: 25, height: 30, margin: 5 }}\n            data-id={contact.id}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => deleteId(contact.id)}\n          >\n            Delete\n          </Button>\n          {`${contact.name}: ${contact.number}`}\n        </li>\n      );\n    });\n  };\n\n  return <ul>{createList()}</ul>;\n}\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  del: PropTypes.func.isRequired,\n};\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction Filter({ setFilterToState }) {\n  const setFilterValue = (event) => {\n    let value = event.currentTarget.value.toUpperCase();\n    setFilterToState(value);\n  };\n  return (\n    <div>\n      <TextField label=\"Filter \" onChange={setFilterValue} />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  setFilterToState: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getIsLoading = (state) => state.app.loading;\nconst getFilter = (state) => state.app.filters;\nconst getContacts = (state) => state.app.contacts;\n\n/* const getVisibleFilterArray = (state) => {\n  const allContacts = getContacts(state);\n  const filterNames = getFilter(state);\n  let newArr = allContacts.filter(({ name }) =>\n    name.toUpperCase().includes(filterNames)\n  );\n  return [...newArr];\n}; */\n\n// add memo\nconst getVisibleFilterArray = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    let newArr = contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter)\n    );\n    return [...newArr];\n  }\n);\n\n// eslint-disable-next-line\nexport default {\n  getIsLoading,\n  getFilter,\n  getContacts,\n  getVisibleFilterArray,\n};\n","import React, { useEffect } from \"react\";\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport appActions from \"../redux/app/app-actions\";\nimport appOperations from \"../redux/app/app-operations\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../redux/app/contacts-selectors\";\n\nfunction ContactsView({\n  fetchContacts,\n  isLoadingContacts,\n  formSubmitHandler,\n  filterSet,\n  visibleArray,\n  contactDelete,\n}) {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n  return (\n    <div className=\"contacts\">\n      <h1>Phonebook</h1>\n      {isLoadingContacts && <h2>Loading ...</h2>}\n      <ContactForm onSubmitData={formSubmitHandler} />\n      <h1>Contacts</h1>\n      <Filter setFilterToState={filterSet} />\n      <ContactList contacts={visibleArray} del={contactDelete} />\n    </div>\n  );\n}\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: selectors.getIsLoading(state),\n  contacts: selectors.getContacts(state),\n  filter: selectors.getFilter(state),\n  visibleArray: selectors.getVisibleFilterArray(state),\n});\n\nconst mapDispatchToProrps = (dispatch) => ({\n  fetchContacts: () => dispatch(appOperations.fetchContacts()),\n  formSubmitHandler: (contactData) =>\n    dispatch(appOperations.addContact(contactData)),\n  contactDelete: (contactId) =>\n    dispatch(appOperations.deleteContact(contactId)),\n  filterSet: (str) => dispatch(appActions.filterSet(str)),\n});\n\n// eslint-disable-next-line\nexport default connect(mapStateToProps, mapDispatchToProrps)(ContactsView);\n"],"sourceRoot":""}