{"version":3,"sources":["views/RegisterView.js"],"names":["styles","form","width","label","display","flexDirection","marginBottom","mapDispatchToProps","onRegister","authOperations","register","connect","useState","name","email","password","user","setUser","handleUserChange","event","inputName","currentTarget","inputValue","value","prev","style","fontFamily","onSubmit","e","preventDefault","autoComplete","type","onChange","marginTop","variant","color"],"mappings":"mOAMMA,EAAS,CACbC,KAAM,CACJC,MAAO,KAETC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,aAAc,KAiFlB,IAAMC,EAAqB,CACzBC,WAAYC,IAAeC,UAOdC,sBAAQ,KAAMJ,EAAdI,EAtFf,YAAuC,IAAfH,EAAc,EAAdA,WAAc,EAaZI,mBAAS,CAC/BC,KAAM,GACNC,MAAO,GACPC,SAAU,KAhBwB,mBAa7BC,EAb6B,KAavBC,EAbuB,KAmB9BC,EAAmB,SAACC,GACxB,IAAIC,EAAYD,EAAME,cAAcR,KAChCS,EAAaH,EAAME,cAAcE,MACrCN,GAAQ,SAACO,GAAD,mBAAC,eACJA,GADG,kBAELJ,EAAYE,QAajB,OACE,gCACE,oBAAIG,MAAO,CAAEC,WAAY,UAAzB,0BAEA,uBAAMC,SAbW,SAACC,GACpBA,EAAEC,iBACFrB,EAAW,CAAEK,KAAMG,EAAKH,KAAMC,MAAOE,EAAKF,MAAOC,SAAUC,EAAKD,WAChEE,EAAQ,CACNJ,KAAM,GACNC,MAAO,GACPC,SAAU,MAOoBU,MAAOzB,EAAOC,KAAM6B,aAAa,MAA/D,UACE,cAAC,IAAD,CACE3B,MAAM,QACN4B,KAAK,OACLlB,KAAK,OACLU,MAAOP,EAAKH,KACZmB,SAAUd,IAGZ,cAAC,IAAD,CACEf,MAAM,UACN4B,KAAK,QACLlB,KAAK,QACLU,MAAOP,EAAKF,MACZkB,SAAUd,IAEZ,cAAC,IAAD,CACEf,MAAM,YACN4B,KAAK,WACLlB,KAAK,WACLU,MAAOP,EAAKD,SACZiB,SAAUd,IAEZ,uBACA,cAAC,IAAD,CACEO,MAAO,CAAEQ,UAAW,IACpBF,KAAK,SACLG,QAAQ,YACRC,MAAM,UAJR","file":"static/js/7.3f5c8719.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport authOperations from \"../redux/auth/auth-operations\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: 15,\n  },\n};\nfunction RegisterView({ onRegister }) {\n  /*   const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleNameChange = (event) => {\n    setName(event.currentTarget.value);\n  };\n  const handleEmailChange = (event) => {\n    setEmail(event.currentTarget.value);\n  };\n  const handlePasswordChange = (event) => {\n    setPassword(event.currentTarget.value);\n  }; */\n  const [user, setUser] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const handleUserChange = (event) => {\n    let inputName = event.currentTarget.name;\n    let inputValue = event.currentTarget.value;\n    setUser((prev) => ({\n      ...prev,\n      [inputName]: inputValue,\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onRegister({ name: user.name, email: user.email, password: user.password });\n    setUser({\n      name: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n  return (\n    <div>\n      <h1 style={{ fontFamily: \"Roboto\" }}>Registration</h1>\n\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\n        <TextField\n          label=\"Name:\"\n          type=\"text\"\n          name=\"name\"\n          value={user.name}\n          onChange={handleUserChange}\n        />\n\n        <TextField\n          label=\"E-mail:\"\n          type=\"email\"\n          name=\"email\"\n          value={user.email}\n          onChange={handleUserChange}\n        />\n        <TextField\n          label=\"Password:\"\n          type=\"password\"\n          name=\"password\"\n          value={user.password}\n          onChange={handleUserChange}\n        />\n        <br />\n        <Button\n          style={{ marginTop: 25 }}\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          SIGN UP ðŸŸ¦\n        </Button>\n      </form>\n    </div>\n  );\n}\n//Short version\nconst mapDispatchToProps = {\n  onRegister: authOperations.register,\n};\n//Full version\n/* const mapDispatchToProps = dispatch=>{\n  onSubmit: (data)=>dispatch (authOperations.register(data))\n} */\n\nexport default connect(null, mapDispatchToProps)(RegisterView);\n"],"sourceRoot":""}